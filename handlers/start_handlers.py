from aiogram import Router
from aiogram.types import Message
from aiogram.filters import Command, CommandObject
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from dotenv import load_dotenv

from keyboards import admin_reply_menu
from utils import verify_payload
from crud import add_registration, mark_confirmed, create_user_if_not_exists, get_user_role
from models import AsyncSessionLocal
import logging

load_dotenv()
logger = logging.getLogger(__name__)
router = Router()


class RegListenerSG(StatesGroup):
    await_name = State()
    await_age = State()
    await_specialty = State()
    await_company = State()
    confirm = State()


class RegSpeakerSG(StatesGroup):
    await_name = State()
    await_age = State()
    await_specialty = State()
    await_company = State()
    await_topic = State()
    confirm = State()


@router.message(Command("start"))
async def cmd_start(message: Message, command: CommandObject, state: FSMContext):
    async with AsyncSessionLocal() as session:
        role = await get_user_role(session, str(message.from_user.id))

    if role in ["event_admin", "super_admin"]:
        await message.answer(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –∞–¥–º–∏–Ω! üìã –ö–Ω–æ–ø–∫–∞ –º–µ–Ω—é –≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Å–Ω–∏–∑—É.",
            reply_markup=admin_reply_menu()
        )
    else:
        await message.answer("–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç –¥–ª—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π üëã")

    token = command.args
    if not token:
        await message.answer("–ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Å—ã–ª–∫—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
        return

    async with AsyncSessionLocal() as session:
        payload = await verify_payload(token, session)

    if not payload:
        await message.answer("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –∏–ª–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω–∞—è —Å—Å—ã–ª–∫–∞.")
        return

    kind = payload["kind"]
    event_id = payload["event_id"]

    if kind == "join":
        await state.update_data(event_id=event_id, kind=kind)
        await state.set_state(RegListenerSG.await_name)
        await message.answer("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å–ª—É—à–∞—Ç–µ–ª—è.\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è (–∫–∞–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ, —á—Ç–æ–±—ã –≤–∞—Å –≤–∏–¥–µ–ª–∏):")
    elif kind == "speaker":
        await state.update_data(event_id=event_id, kind=kind)
        await state.set_state(RegSpeakerSG.await_name)
        await message.answer("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –¥–æ–∫–ª–∞–¥—á–∏–∫–∞.\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
    elif kind == "confirm":
        tg_id = str(message.from_user.id)
        async with AsyncSessionLocal() as session:
            ok = await mark_confirmed(session, event_id, tg_id)
            if ok:
                await message.answer("–°–ø–∞—Å–∏–±–æ! –í—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ —É—á–∞—Å—Ç–∏–µ.")
            else:
                await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∞—à—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")
    else:
        await message.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å—Å—ã–ª–∫–∏.")


# --- Listener FSM ---
@router.message(RegListenerSG.await_name)
async def listener_name(message: Message, state: FSMContext):
    name = message.text.strip()
    if not name:
        await message.answer("–ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞:")
        return
    await state.update_data(name=name)
    await state.set_state(RegListenerSG.await_age)
    await message.answer("–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç:")


@router.message(RegListenerSG.await_age)
async def listener_age(message: Message, state: FSMContext):
    text = message.text.strip()
    age = None
    if text.lower() not in ("–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å", "skip", "-"):
        try:
            age = int(text)
            if age <= 0 or age > 120:
                raise ValueError()
        except ValueError:
            await message.answer("–í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —Ü–µ–ª—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return
    await state.update_data(age=age)
    await state.set_state(RegListenerSG.await_specialty)
    await message.answer("–£–∫–∞–∂–∏—Ç–µ –≤–∞—à—É —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å:")


@router.message(RegListenerSG.await_specialty)
async def listener_specialty(message: Message, state: FSMContext):
    specialty = message.text.strip()
    if not specialty:
        await message.answer("–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π. –í–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞:")
        return
    await state.update_data(specialty=specialty)
    await state.set_state(RegListenerSG.await_company)
    await message.answer("–£–∫–∞–∂–∏—Ç–µ –∫–æ–º–ø–∞–Ω–∏—é/—É—á–µ–±–Ω–æ–µ –∑–∞–≤–µ–¥–µ–Ω–∏–µ (–∏–ª–∏ '-', –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–æ–ø—Ä–æ—Å):")


@router.message(RegListenerSG.await_company)
async def listener_company(message: Message, state: FSMContext):
    text = message.text.strip()
    company = None if text.lower() in ("–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å", "skip", "-") else text
    data = await state.get_data()
    event_id = data.get("event_id")
    name = data.get("name")
    age = data.get("age")
    specialty = data.get("specialty")
    tg_id = str(message.from_user.id)
    tg_username = message.from_user.username

    async with AsyncSessionLocal() as session:
        # ensure user exists
        await create_user_if_not_exists(session, tg_id, tg_username)
        await add_registration(session, event_id, tg_id, "listener", name, age, specialty, company, None)
    await message.answer("–°–ø–∞—Å–∏–±–æ ‚Äî –≤—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ —Å–ª—É—à–∞—Ç–µ–ª—å. –î–æ –≤—Å—Ç—Ä–µ—á–∏!")
    await state.clear()


# --- Speaker FSM ---
@router.message(RegSpeakerSG.await_name)
async def speaker_name(message: Message, state: FSMContext):
    name = message.text.strip()
    if not name:
        await message.answer("–ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞:")
        return
    await state.update_data(name=name)
    await state.set_state(RegSpeakerSG.await_age)
    await message.answer("–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç:")


@router.message(RegSpeakerSG.await_age)
async def speaker_age(message: Message, state: FSMContext):
    text = message.text.strip()
    try:
        age = int(text)
        if age <= 0 or age > 120:
            raise ValueError()
    except ValueError:
        await message.answer("–í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —Ü–µ–ª—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return
    await state.update_data(age=age)
    await state.set_state(RegSpeakerSG.await_specialty)
    await message.answer("–£–∫–∞–∂–∏—Ç–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å (–∏–ª–∏ '-', –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–æ–ø—Ä–æ—Å):")


@router.message(RegSpeakerSG.await_specialty)
async def speaker_specialty(message: Message, state: FSMContext):
    specialty = message.text.strip()
    if not specialty:
        await message.answer("–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π. –í–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞:")
        return
    await state.update_data(specialty=specialty)
    await state.set_state(RegSpeakerSG.await_company)
    await message.answer("–£–∫–∞–∂–∏—Ç–µ –∫–æ–º–ø–∞–Ω–∏—é/—É—á–µ–±–Ω–æ–µ –∑–∞–≤–µ–¥–µ–Ω–∏–µ –≥–¥–µ –≤—ã —Ä–∞–±–æ—Ç–∞–µ—Ç–µ/—É—á–∏—Ç–µ—Å—å:")


@router.message(RegSpeakerSG.await_company)
async def speaker_company(message: Message, state: FSMContext):
    company = message.text.strip()
    if not company:
        await message.answer("–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π. –í–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞:")
        return
    await state.update_data(company=company)
    await state.set_state(RegSpeakerSG.await_topic)
    await message.answer("–£–∫–∞–∂–∏—Ç–µ —Ç–µ–º—É –¥–æ–∫–ª–∞–¥–∞ (–∫—Ä–∞—Ç–∫–æ):")


@router.message(RegSpeakerSG.await_topic)
async def speaker_topic(message: Message, state: FSMContext):
    topic = message.text.strip()
    if not topic:
        await message.answer("–¢–µ–º–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π. –í–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞:")
        return
    data = await state.get_data()
    event_id = data.get("event_id")
    name = data.get("name")
    age = data.get("age")
    specialty = data.get("specialty")
    company = data.get("company")
    tg_id = str(message.from_user.id)
    tg_username = message.from_user.username

    async with AsyncSessionLocal() as session:
        await create_user_if_not_exists(session, tg_id, tg_username)
        await add_registration(session, event_id, tg_id, "speaker", name, age, specialty, company, topic)
    await message.answer("–°–ø–∞—Å–∏–±–æ ‚Äî –≤—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –¥–æ–∫–ª–∞–¥—á–∏–∫. –ú—ã —Å–≤—è–∂–µ–º—Å—è –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏.")
    await state.clear()
