from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from datetime import datetime

from dotenv import load_dotenv
from sqlalchemy import select

from keyboards import event_actions_kb, events_list_kb, edit_menu_kb, admin_main_menu, back_to_main_menu, \
    broadcast_mail_menu
from mailer import Mailer
from models import AsyncSessionLocal, Event
from crud import create_event, save_generated_link, get_event, get_registrations_for_event, get_events_by_owner, \
    delete_event, update_event, get_user_by_tg
from utils import make_deeplink
from scheduler import schedule_event_jobs_for_event
import os
import logging

from bot import bot, scheduler

load_dotenv()
logger = logging.getLogger(__name__)
router = Router()


class CreateEventSG(StatesGroup):
    await_title = State()
    await_publish = State()
    await_reminder_date = State()
    await_reminder_text = State()
    await_confirm_date = State()
    await_confirm_text = State()
    await_category = State()
    confirm = State()


class EditEventSG(StatesGroup):
    await_new_value = State()


class BroadcastSG(StatesGroup):
    await_event_id = State()
    await_text = State()
    await_schedule_choice = State()
    await_schedule_time = State()


@router.message(Command("admin"))
async def cmd_admin_menu(message: Message):
    await message.answer("–ê–¥–º–∏–Ω-–º–µ–Ω—é:", reply_markup=admin_main_menu())


@router.callback_query(F.data == "admin:menu")
async def cq_admin_menu(callback: CallbackQuery):
    await callback.message.edit_text("–ê–¥–º–∏–Ω-–º–µ–Ω—é:", reply_markup=admin_main_menu())


@router.message(F.text == "üìã –ê–¥–º–∏–Ω-–º–µ–Ω—é")
async def show_admin_menu(message: Message):
    await message.answer(
        "–ê–¥–º–∏–Ω-–º–µ–Ω—é:",
        reply_markup=admin_main_menu()
    )


@router.callback_query(F.data == "admin:broadcast")
async def cq_broadcast(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ ID –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:")
    await state.set_state(BroadcastSG.await_event_id)
    await callback.answer()


# –°–æ–∑–¥–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
@router.callback_query(F.data == "admin:create_event")
async def cq_admin_create_event(callback: CallbackQuery, state: FSMContext):
    await state.set_state(CreateEventSG.await_title)
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:",
        reply_markup=back_to_main_menu()
    )

# –ú–æ–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
@router.callback_query(F.data == "admin:my_events")
async def cq_admin_my_events(callback: CallbackQuery):
    async with AsyncSessionLocal() as session:
        events = await get_events_by_owner(session, str(callback.from_user.id))

    if not events:
        await callback.message.edit_text(
            "–£ –≤–∞—Å –Ω–µ—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π.",
            reply_markup=admin_main_menu()
        )
        return

    text = "üìã –í–∞—à–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:\n\n"
    kb = []
    for ev in events:
        text += f"‚Ä¢ {ev.title} ‚Äî —Å–æ–∑–¥–∞–Ω {ev.created_at}\n"
        kb.append([InlineKeyboardButton(text=ev.title, callback_data=f"event:{ev.id}")])

    kb.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin:menu")])

    await callback.message.edit_text(text, reply_markup=InlineKeyboardMarkup(inline_keyboard=kb))


@router.message(BroadcastSG.await_event_id)
async def broadcast_get_event(message: Message, state: FSMContext):
    await state.update_data(event_id=message.text.strip())
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏:")
    await state.set_state(BroadcastSG.await_text)


@router.message(BroadcastSG.await_text)
async def broadcast_get_text(message: Message, state: FSMContext):
    await state.update_data(text=message.text.strip())
    await message.answer("–ö–æ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É?", reply_markup=broadcast_mail_menu())
    await state.set_state(BroadcastSG.await_schedule_choice)


@router.callback_query(F.data == "broadcast:now")
async def broadcast_now(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    event_id = data["event_id"]
    text = data["text"]

    async with AsyncSessionLocal() as session:
        regs = await get_registrations_for_event(session, int(event_id))
        chat_ids = [r.tg_id for r in regs]

    mailer = Mailer(bot, concurrency=8)
    await mailer.send_batch(chat_ids, text)

    await callback.message.edit_text(
        f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ({len(chat_ids)} –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π).",
        reply_markup=admin_main_menu()
    )
    await state.clear()


@router.callback_query(F.data == "broadcast:schedule")
async def broadcast_schedule(callback: CallbackQuery, state: FSMContext):
    await state.set_state(BroadcastSG.await_schedule_time)
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ `18:30 25.12.2025`",
        reply_markup=back_to_main_menu()
    )
    await callback.answer()


@router.message(BroadcastSG.await_schedule_time)
async def broadcast_get_time(message: Message, state: FSMContext):
    data = await state.get_data()
    event_id = data["event_id"]
    text = data["text"]

    try:
        dt = datetime.strptime(message.text.strip(), "%H:%M %d.%m.%Y")
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –£–∫–∞–∂–∏—Ç–µ —Ç–∞–∫: 18:30 25.12.2025")
        return

    async with AsyncSessionLocal() as session:
        regs = await get_registrations_for_event(session, int(event_id))
        chat_ids = [r.tg_id for r in regs]

    mailer = Mailer(bot, concurrency=8)

    # –ø–ª–∞–Ω–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —á–µ—Ä–µ–∑ APScheduler
    scheduler.add_job(
        mailer.send_batch,
        "date",
        run_date=dt,
        args=[chat_ids, text]
    )

    await message.answer(
        f"‚è≥ –†–∞—Å—Å—ã–ª–∫–∞ –ø–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—é {event_id} –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ {dt.strftime('%d.%m.%Y %H:%M')}",
        reply_markup=admin_main_menu()
    )
    await state.clear()


def parse_dt(text: str):
    try:
        tpart, dpart = text.strip().split()
        return datetime.strptime(f"{dpart} {tpart}", "%d.%m.%Y %H:%M")
    except Exception:
        return None


@router.message(BroadcastSG.await_schedule_time)
async def broadcast_schedule_time(message: Message, state: FSMContext):
    dt = parse_dt(message.text)
    if not dt:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `18:30 25.12.2025`")
        return

    data = await state.get_data()
    event_id = data["event_id"]
    text = data["text"]

    async with AsyncSessionLocal() as session:
        regs = await get_registrations_for_event(session, event_id)
        chat_ids = [r.tg_id for r in regs]

    mailer = Mailer(bot, concurrency=8)

    # –ø–ª–∞–Ω–∏—Ä—É–µ–º –∑–∞–¥–∞—á—É
    scheduler.add_job(
        mailer.send_batch,
        trigger="date",
        run_date=dt,
        args=[chat_ids, text],
        id=f"broadcast_{event_id}_{dt.timestamp()}"
    )

    await message.answer(f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ {dt.strftime('%d.%m.%Y %H:%M')}", reply_markup=admin_main_menu())
    await state.clear()


@router.message(Command(commands=["create_event"]))
async def cmd_create_event(message: Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–∏ —É–ø—Ä–æ—â–µ–Ω–∞: –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –∞–¥–º–∏–Ω–∞–º–∏ —è–≤–ª—è—é—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å role == 'event_admin' –∏–ª–∏ super_admin
    tg_id = str(message.from_user.id)
    async with AsyncSessionLocal() as session:
        from crud import get_user_by_tg
        user = await get_user_by_tg(session, tg_id)
        if not user or user.role not in ("event_admin", "super_admin"):
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è.")
            return
    await state.set_state(CreateEventSG.await_title)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫/–Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:")


@router.message(CreateEventSG.await_title)
async def ce_title(message: Message, state: FSMContext):
    text = message.text.strip()
    if not text:
        await message.answer("–ó–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
        return
    await state.update_data(title=text)
    await state.set_state(CreateEventSG.await_publish)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä 18:30 25.12.2025)")


@router.message(CreateEventSG.await_publish)
async def ce_publish(message: Message, state: FSMContext):
    dt = parse_dt(message.text)
    if not dt:
        await message.answer("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú –î–î.–ú–ú.–ì–ì–ì–ì.")
        return
    await state.update_data(publish_at=dt)
    await state.set_state(CreateEventSG.await_reminder_date)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (–≤ —Ç–æ–º –∂–µ —Ñ–æ—Ä–º–∞—Ç–µ) –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–Ω–µ—Ç' –µ—Å–ª–∏ –Ω–µ –Ω—É–∂–Ω–æ:")


@router.message(CreateEventSG.await_reminder_date)
async def ce_reminder_date(message: Message, state: FSMContext):
    text = message.text.strip().lower()
    if text in ("–Ω–µ—Ç", "no", "skip", "-"):
        await state.update_data(reminder_at=None)
        await state.set_state(CreateEventSG.await_confirm_date)
        await message.answer("–ü—Ä–æ–ø—É—â–µ–Ω–æ. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ '–Ω–µ—Ç':")
        return
    dt = parse_dt(message.text)
    if not dt:
        await message.answer("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ '–Ω–µ—Ç':")
        return
    await state.update_data(reminder_at=dt)
    await state.set_state(CreateEventSG.await_reminder_text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (–ª–∏–º–∏—Ç 4096 —Å–∏–º–≤–æ–ª–æ–≤):")


@router.message(CreateEventSG.await_reminder_text)
async def ce_reminder_text(message: Message, state: FSMContext):
    text = message.text.strip()
    if len(text) > 4096:
        await message.answer("–¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π.")
        return
    await state.update_data(reminder_text=text)
    await state.set_state(CreateEventSG.await_confirm_date)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ '–Ω–µ—Ç':")


@router.message(CreateEventSG.await_confirm_date)
async def ce_confirm_date(message: Message, state: FSMContext):
    text = message.text.strip().lower()
    if text in ("–Ω–µ—Ç", "no", "skip", "-"):
        await state.update_data(confirm_request_at=None)
        await state.set_state(CreateEventSG.await_category)
        await message.answer("–ü—Ä–æ–ø—É—â–µ–Ω–æ. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–ª–∏ '–Ω–µ—Ç' (–ø–æ–∫–∞ –º–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):")
        return
    dt = parse_dt(message.text)
    if not dt:
        await message.answer("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ '–Ω–µ—Ç':")
        return
    await state.update_data(confirm_request_at=dt)
    await state.set_state(CreateEventSG.await_confirm_text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è (–ª–∏–º–∏—Ç 4096 —Å–∏–º–≤–æ–ª–æ–≤):")


@router.message(CreateEventSG.await_confirm_text)
async def ce_confirm_text(message: Message, state: FSMContext):
    text = message.text.strip()
    if len(text) > 4096:
        await message.answer("–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç.")
        return
    await state.update_data(confirm_text=text)
    await state.set_state(CreateEventSG.await_category)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å) –∏–ª–∏ '–Ω–µ—Ç':")


@router.message(CreateEventSG.await_category)
async def ce_category(message: Message, state: FSMContext):
    text = message.text.strip().lower()
    category_id = None
    if text not in ("–Ω–µ—Ç", "no", "-"):
        try:
            category_id = int(text)
        except ValueError:
            await message.answer("–ï—Å–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ '–Ω–µ—Ç', –∏–Ω–∞—á–µ –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.")
            return
    data = await state.get_data()
    title = data["title"]
    publish_at = data["publish_at"]
    reminder_at = data.get("reminder_at")
    reminder_text = data.get("reminder_text")
    confirm_request_at = data.get("confirm_request_at")
    confirm_text = data.get("confirm_text")
    owner_tg_id = str(message.from_user.id)

    async with AsyncSessionLocal() as session:
        ev = await create_event(session, owner_tg_id, title, title, publish_at, reminder_at,
                                reminder_text, confirm_request_at, confirm_text, category_id)
        # generate links and store them
        bot_username = os.getenv("BOT_USERNAME")
        join = await make_deeplink("join", ev.id, bot_username, session)
        speaker = await make_deeplink("speaker", ev.id, bot_username, session)
        await save_generated_link(session, ev.id, "join", join, expires_at=None)
        await save_generated_link(session, ev.id, "speaker", speaker, expires_at=None)

    # schedule jobs
    await schedule_event_jobs_for_event(ev, bot, scheduler)

    await message.answer(f"–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–æ. ID={ev.id}\n–°—Å—ã–ª–∫–∞ –¥–ª—è —Å–ª—É—à–∞—Ç–µ–ª–µ–π: {join}\n–°—Å—ã–ª–∫–∞ –¥–ª—è –¥–æ–∫–ª–∞–¥—á–∏–∫–æ–≤: {speaker}")
    await state.clear()


@router.message(Command(commands=["message_registrations"]))
async def cmd_message_registrations(message: Message, state: FSMContext):
    # –ü—Ä–æ—Å—Ç–æ–π flow: /message_registrations <event_id>
    parts = message.text.strip().split()
    if len(parts) != 2:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /message_registrations <event_id>")
        return
    try:
        event_id = int(parts[1])
    except ValueError:
        await message.answer("event_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return

    # –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤
    async with AsyncSessionLocal() as session:
        ev = await get_event(session, event_id)
        if not ev:
            await message.answer("–°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return
        if ev.owner_tg_id != message.from_user.id and (await get_user_by_tg(session, str(message.from_user.id))) is None:
            # —É–ø—Ä–æ—â—ë–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –∏–ª–∏ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω (–ø—Ä–æ–≤–µ—Ä–∫—É —Ä–æ–ª–µ–π –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å)
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É –¥–ª—è —ç—Ç–æ–≥–æ —Å–æ–±—ã—Ç–∏—è.")
            return
    await state.update_data(target_event_id=event_id)
    await state.set_state(CreateEventSG.confirm)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ (–±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤—Å–µ–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –Ω–∞ —Å–æ–±—ã—Ç–∏–µ):")


@router.message(CreateEventSG.confirm)
async def do_message_registrations(message: Message, state: FSMContext):
    data = await state.get_data()
    event_id = data.get("target_event_id")
    text = message.text.strip()
    if not text:
        await message.answer("–¢–µ–∫—Å—Ç –ø—É—Å—Ç–æ–π.")
        return
    async with AsyncSessionLocal() as session:
        regs = await get_registrations_for_event(session, event_id)
        chat_ids = [r.tg_id for r in regs]
    from mailer import Mailer
    mailer = Mailer(bot, concurrency=8)
    await mailer.send_batch(chat_ids, text)
    await message.answer(f"–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ ({len(chat_ids)} –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π).")
    await state.clear()


@router.message(Command("my_events"))
async def cmd_my_events(message: Message):
    tg_id = str(message.from_user.id)
    async with AsyncSessionLocal() as session:
        events = await get_events_by_owner(session, tg_id)

    if not events:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π.")
        return

    await message.answer(
        "–í–∞—à–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:",
        reply_markup=events_list_kb(events)
    )


@router.callback_query(F.data.startswith("event:"))
async def cq_event_selected(callback: CallbackQuery):
    event_id = int(callback.data.split(":")[1])
    async with AsyncSessionLocal() as session:
        result = await session.execute(select(Event).where(Event.id == event_id))
        ev = result.scalar_one_or_none()

    if not ev:
        await callback.answer("–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
        return

    await callback.message.edit_text(
        f"üìå {ev.title}\n"
        f"–î–∞—Ç–∞: {ev.publish_at:%d.%m.%Y %H:%M}\n"
        f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {ev.reminder_text or '‚Äî'}",
        reply_markup=event_actions_kb(ev.id)
    )


# --- Callback –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å" ---
@router.callback_query(F.data.startswith("edit:"))
async def cq_edit_event(callback: CallbackQuery, state: FSMContext):
    # data –≤–∏–¥–∞: "edit:<event_id>"
    event_id = int(callback.data.split(":")[1])

    # –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
    async with AsyncSessionLocal() as session:
        event = await get_event(session, event_id)
        if not event:
            await callback.answer("–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
            return

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º event_id –≤ state
    await state.update_data(edit_event_id=event_id)

    await callback.message.edit_text(
        f"–í—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: {event.title}\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:",
        reply_markup=edit_menu_kb(event_id)
    )
    await callback.answer()  # —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏" —É –∫–Ω–æ–ø–∫–∏


@router.callback_query(F.data.startswith(("edit_field:", "event:")))
async def cq_edit(callback: CallbackQuery, state: FSMContext):
    data = callback.data

    if data.startswith("edit_field:"):
        # edit_field:<field>:<event_id>
        _, field, event_id = data.split(":")
        event_id = int(event_id)
        await state.update_data(edit_field=field, edit_event_id=event_id)
        await state.set_state(EditEventSG.await_new_value)
        await callback.message.edit_text(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è {field}:")
        await callback.answer()

    elif data.startswith("event:"):
        # event:<event_id> ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ —Å–æ–±—ã—Ç–∏—è
        event_id = int(data.split(":")[1])
        # –∑–¥–µ—Å—å –Ω—É–∂–Ω–æ –¥–æ—Å—Ç–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ –∏ –ø–æ–∫–∞–∑–∞—Ç—å –µ–≥–æ —Ç–µ–∫—Å—Ç + –∫–Ω–æ–ø–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        # –Ω–∞–ø—Ä–∏–º–µ—Ä:
        async with AsyncSessionLocal() as session:
            event = await get_event(session, event_id)
            await callback.message.edit_text(f"–°–æ–±—ã—Ç–∏–µ: {event.title}", reply_markup=edit_menu_kb(event_id))
            await callback.answer("–í–æ–∑–≤—Ä–∞—Ç –∫ —Å–æ–±—ã—Ç–∏—é")


@router.message(EditEventSG.await_new_value)
async def save_new_value(message: Message, state: FSMContext):
    data = await state.get_data()
    event_id = data.get("edit_event_id")
    field = data.get("edit_field")
    new_value = message.text.strip()

    if not event_id or not field:
        await message.answer("–û—à–∏–±–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        await state.clear()
        return

    async with AsyncSessionLocal() as session:
        await update_event(session, event_id, **{field: new_value})

    await message.answer(f"–ü–æ–ª–µ {field} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.")
    await state.clear()



@router.callback_query(F.data.startswith("delete:"))
async def cq_event_delete(callback: CallbackQuery):
    event_id = int(callback.data.split(":")[1])
    tg_id = str(callback.from_user.id)

    async with AsyncSessionLocal() as session:
        ok = await delete_event(session, event_id, tg_id)

    if ok:
        await callback.message.edit_text("‚úÖ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —É–¥–∞–ª–µ–Ω–æ")
    else:
        await callback.answer("–û—à–∏–±–∫–∞: –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)

